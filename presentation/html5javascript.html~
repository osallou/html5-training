<!DOCTYPE html>
<html>
<head>
	<meta charset="utf-8">
	<meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
	<meta name="viewport" content="width=1024, user-scalable=no">

	<title>HTML 5 - Javascript</title>
	
	<!-- Required stylesheet -->
	<link rel="stylesheet" href="core/deck.core.css">
	
	<!-- Extension CSS files go here. Remove or add as needed. -->
	<link rel="stylesheet" href="extensions/goto/deck.goto.css">
	<link rel="stylesheet" href="extensions/menu/deck.menu.css">
	<link rel="stylesheet" href="extensions/navigation/deck.navigation.css">
	<link rel="stylesheet" href="extensions/status/deck.status.css">
	<link rel="stylesheet" href="extensions/hash/deck.hash.css">
	<link rel="stylesheet" href="extensions/scale/deck.scale.css">

	<!-- Style theme. More available in /themes/style/ or create your own. -->
	<link rel="stylesheet" href="themes/style/web-2.0.css">
	
	<!-- Transition theme. More available in /themes/transition/ or create your own. -->
	<link rel="stylesheet" href="themes/transition/horizontal-slide.css">
	
	<!-- Required Modernizr file -->
	<script src="modernizr.custom.js"></script>
</head>
<body class="deck-container">

<!-- Begin slides. Just make elements with a class of slide. -->

<section class="slide">
    <h2>HTML 5 and Javascript training session</h2>
    <img src="http://www.w3.org/html/logo/downloads/HTML5_Logo_128.png"/>
    <hr/>
    <p style="text-align: right;margin-top: 20px;">By Olivier Sallou - olivier.sallou@irisa.fr</p>
</section>

<section class="slide">
	<h2>Materials</h2>
<p>Presentation and exercices are available at: <a href="https://github.com/osallou/html5-training">https://github.com/osallou/html5-training</a></p>
</section>

<section class="slide">
	<h1>HTML</h1>
</section>
<section class="slide">
    <h2>Important tips</h2>
    <ul>
        <li class="slide">
            <h3>XHTML strict</h3>
            <p>HTML markups must follow strict HTML</p>
        </li>
        <li class="slide">
            <h3>Limit Javascript libraries loading at startup (in head section)</h3>
        </li>
        <li class="slide">
            <h3>Store  program information in <b>data-xxx</b> attribute</h3>
            <pre><code>&lt;div id=&quot;my&quot;  data-my=&quot;example&quot;&gt;&lt;/div&gt;</code></pre>
        </li>
        <li class="slide">
            <h3>HTML elements managed with attributes:</h3>
            <ul><li>id : <b>must</b> be unique in the page</li>
            <li>name: name of the parameter for forms, should be name myparam[] for multiple value parameters</li>
            <li>class: used for display with CSS but also to select multiple elements sharing a common usage</li>
            </ul>
        </li>
    </ul>
</section>

<section class="slide">
	<h1>CSS</h1>
</section>
<section class="slide">
    <h2>CSS stylesheets</h2>
    <p>Move all display/style in CSS files</p>
    <p>Rules can apply on an attribute <b>id</b> or <b>class</b></p>
    <p>Many useful selectors (x-before, x-after, attributes, ...)</p>
    <p><a href="http://sass-lang.com/">sass</a> helps to introduce variables and inheritance in CSS, but not interpreted natively, must be compiled to CSS</p>
</section>

<section class="slide">
    <h1>Debuggers</h1>
</section>
<section class="slide">
    <h2>Firebug, Chrome Developper tools,...</h2>
    <p>All navigators integrate developper tools:</p>
    <ul>
        <li>Network access</li>
        <li>Javascript console and errors</li>
        <li>Dynamic HTML DOM layout</li>
        <li>Style applied on an element</li>
    </ul>
    <h3><i>console.log("...")</i> is your friend</h3>
</section>

<section class="slide">
    <h1>Javascript</h1>
</section>

<section class="slide">
    <h2>Javascript</h2>
    <ul>
    	<li>non typed</li>
    	<li>asynchronous</li>
    	<li>event based</li>
	<li>Supports object-like programming, eveything is an object and can be extended (prototype)</li>
	<li>Data: loves JSON</li>
    </ul>
</section>

<section class="slide">
<h2>Pure Javascript - variables</h2>
Variables are visible within the scope of their declaration (function, global, loop...)
<pre><code>
var test = 10;
test = "test"
// Array
test = new Array();
test[0] = 10;
// Object / JSON
test = {};
test["var1"] = 10;
</code></pre>
</section>

<section class="slide">
<h2>Pure Javascript - functions</h2>
<pre><code>
function add(a,b) {
 console.log("a="+a);
 return a+b;
}
</code></pre>
</section>

<section class="slide">
<h2>Pure Javascript - Objects</h2>
<div><i>objectname</i>.prototype.<i>propertyname</i> = <i>expression</i> ;
<pre><code>
  function MyObjet(name){ // constructor
    this.name=name;                             
  }

  MyObjet.prototype.minWidth = 500;

  MyObjet.prototype.setWidth = function(x) {
    if (x >= this.minWidth ) {
      this.width = x ;
      ...
      // We could resize a div with name
      // this.name for example
    }
  }

  var test = new MyObjet("sample");  // instantiate an object
  test.setWidth(300);
</code></pre>
</section>

<section class="slide">
  <h2>Pure Javascript - DOM manipulation</h2>
  <ul>
  <li>Select/Add elements
    <pre><code>
div1=document.getElementById("div1");
p1=document.createElement("p") ;
// Set attribute
p1.data-something = "test";
// Set "content"
p1.innerHTML = "some text";
div1.appendChild(p1);
    </code></pre>
  </li>
  <li>Events
    <pre><code>
// Add an event (click) listener on "button" element
document.getElementById("button").addEventListener("click", function(event){
	alert("button clicked");
	// Stop event propagation
	event.stopPropagation();
	// e.cancelBubble = true; for some IE
}, true);
    </code></pre>

  </li>
  </ul>
</section>


<section class="slide">
<h2>Pure Javascript - Network</h2>
<pre><code>
var xhr = null;
if (window.XMLHttpRequest || window.ActiveXObject) {
    if (window.ActiveXObject) {
        try {
            xhr = new ActiveXObject("Msxml2.XMLHTTP");
        } catch(e) {
            xhr = new ActiveXObject("Microsoft.XMLHTTP");
        }
    } else {
        xhr = new XMLHttpRequest(); 
    }
} else {
    alert("Votre navigateur ne supporte pas l'objet XMLHTTPRequest...");
    return;
}

// callback on answer
xhr.onreadystatechange = function() {
    if (xhr.readyState == 4 && (xhr.status == 200 || xhr.status == 0)) {
        // We could use JSON.parse to retreive JSON encoded data
        alert(xhr.responseText);
    }
};

xhr.open("GET", "handlingData.php?variable1=data1&variable2=data2", true);
xhr.send(null);
</code>
</pre>
</section>

<section class="slide">
    <h1>JQuery</h1>
</section>

<section class="slide">
    <h2>Why JQuery? (or Prototype etc..)</h2>
<ul>
<li>Lots of API stuff that helps DOM and event manipulation</li>
<li>Lots of libraries/plugins available</li>
<li>Hides browsers implementations: code once, run everywhere</li>
</ul>
</section>

<section class="slide">
    <h2>JQuery basic usage</h2>
<ul>
<li>Needs to wait library to be loaded before any use</li>
<li><pre><code>
$(document).ready(function() {
  // do your stuff
});

//OR

$(function() {
     // do some stuff
});
</code></pre></li>
<li>Manipulates JQuery objects, not pure DOM elements (but can be converted to/from)</li>
</ul>
</section>

<section class="slide">
    <h2>Easy DOM access</h2>
    <ul>
        <li>$("div"): access all <b>div</b> elements</li>
        <li>$(".myclass"): access all elements with class <i>myclass</i></li>
        <li>$("#myobject"): access element with id <i>myobject</i></li>
    </ul>
</section>

<section class="slide">
    <h2>Easy DOM manipulation</h2>
    <p>
        &lt;input id="myspecificinput" type="text" value="8"/&gt;
        &lt;div id="myspecificdiv"&gt;
        &lt;/div&gt;
    </p>
    <pre><code>
var myobj = $("#myspecificdiv");
// Add some HTML content in my div
myobj.append("&lt;p&gt;sometext&lt;/p&gt;");
// Access attributes of my div
myobj.attr("data-sample","something");
var myattr = myobj.attr("data-other");
console.log(myattr);
// get/set the value of an input form
var myinput =  $("#myspecificinput");
myinput.val(10);
console.log(myinput.val());
    </code></pre>
    <p>Results in
        &lt;input id="myspecificinput" type="text" value="9"/&gt;
        &lt;div data-sample="something" id="myspecificdiv"&gt;
        &lt;p&gt; sometext&lt;p&gt;
        &lt;/div&gt;
    </p>
</section>

<section class="slide">
    <h2>Easy network access</h2>

<pre><code>
    $.getJSON(myurl, function(data) {
           // data is already JSON encoded..
           console.log(data['some_key_in_object']);
    });
</code></pre>
    <p>Warning: URL should be in current domain or a server accepting cross-domain requests (see CORS). </p>
</section>


<section class="slide">
<h2>Exercise 1</h2>
</section>

<section class="slide">
    <h1>HTML 5</h1>
    http://slides.html5rocks.com/
    <h2>Drag/Drop (info only)</h2>
    <h2>Audio/Video (show according to todo type)</h2>
    <h2>Web sockets (push info)</h2>
    <h2>Offline/Online (cache)</h2>
    <h2>Local storage/ Web sql (store when offline)</h2>
    <h2>Workers (info only)</h2>
    <h2>Canvas (basic drawing exo)</h2>
    <h2>CORS (call remote nodejs server)</h2>
    <h2>Semantic tags (info only)</h2>
    <h2>notifications/messages (communicate between windows)</h2>
    <h2>file system</h2>
    <h2>Geo localisation (info only)</h2>
    <h2>Devices</h2>
    <h2>History stack</h2>
</section>

<section class="slide">
    <h1>To Javascript....</h1>
    <h2>CoffeeScript</h2>
    <h2>Dart</h2>
</section>

<section class="slide">
    <h1>Frameworks MVC like</h1>
    <h2>AngularJS</h2>
    <h2>BackboneJS</h2>
    <h2>Knockout</h2>
</section>

<section class="slide">
    <h1>A different Javascript</h1>
    <h2>asm - http://asmjs.org/spec/latest/</h2>
    <h2>on desktop (TideSDK)</h2>
    <h2>...</h2>
</section>

<!-- End slides. -->


<!-- Begin extension snippets. Add or remove as needed. -->

<!-- deck.navigation snippet -->
<a href="#" class="deck-prev-link" title="Previous">&#8592;</a>
<a href="#" class="deck-next-link" title="Next">&#8594;</a>

<!-- deck.status snippet -->
<p class="deck-status">
	<span class="deck-status-current"></span>
	/
	<span class="deck-status-total"></span>
</p>

<!-- deck.goto snippet -->
<form action="." method="get" class="goto-form">
	<label for="goto-slide">Go to slide:</label>
	<input type="text" name="slidenum" id="goto-slide" list="goto-datalist">
	<datalist id="goto-datalist"></datalist>
	<input type="submit" value="Go">
</form>

<!-- deck.hash snippet -->
<a href="." title="Permalink to this slide" class="deck-permalink">#</a>

<!-- End extension snippets. -->


<!-- Required JS files. -->
<script src="jquery-1.7.2.min.js"></script>
<script src="core/deck.core.js"></script>

<!-- Extension JS files. Add or remove as needed. -->
<script src="core/deck.core.js"></script>
<script src="extensions/hash/deck.hash.js"></script>
<script src="extensions/menu/deck.menu.js"></script>
<script src="extensions/goto/deck.goto.js"></script>
<script src="extensions/status/deck.status.js"></script>
<script src="extensions/navigation/deck.navigation.js"></script>
<script src="extensions/scale/deck.scale.js"></script>

<!-- Initialize the deck. You can put this in an external file if desired. -->
<script>
	$(function() {
		$.deck('.slide');
	});
</script>
</body>
</html>
